from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import logging
import requests
import asyncio
from datetime import datetime
import matplotlib.pyplot as plt
from io import BytesIO
import numpy as np

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

API_TOKEN = "8032460771:AAE_Yu4hdZZaDyhmRJscXkwF6QA9eeMU1bA"
WEATHER_API_KEY = "3144fd2e14708aaf035769fa7694778d"
WEATHER_API_URL = "https://api.openweathermap.org/data/2.5/forecast"

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

#–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π(–ª–æ–Ω–≥ –ø–∞–º–æ—Ö)
class WeatherStates(StatesGroup):
    waiting_for_start_point = State()
    waiting_for_end_point = State()
    waiting_for_stops = State()
    waiting_for_interval = State()

# –§-—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
async def get_weather(city, days):
    try:
        params = {
            'q': city,
            'appid': WEATHER_API_KEY,
            'units': 'metric',
            'lang': 'ru',
            'cnt': days * 8  #8 –∏–∑–º–∏—Ä–µ–Ω–∏–π –≤ –¥–µ–Ω—å (–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞)
        }
        response = requests.get(WEATHER_API_URL, params=params)
        data = response.json()
        
        if response.status_code == 200:
            forecasts = []
            temps = []
            dates = []
            
            for item in data['list']:
                dt = datetime.fromtimestamp(item['dt'])
                temp = item['main']['temp']
                humidity = item['main']['humidity']
                wind = item['wind']['speed']
                description = item['weather'][0]['description']
                
                if dt.hour == 12 or len(forecasts) == 0:
                    forecasts.append({
                        'date': dt.strftime('%d.%m.%Y %H:%M'),
                        'temp': temp,
                        'humidity': humidity,
                        'wind': wind,
                        'description': description
                    })
                
                temps.append(temp)
                dates.append(dt)
            
            return forecasts, dates, temps
        else:
            return None, None, None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        return None, None, None

#–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
def create_weather_graph(dates, temps, city):
    plt.figure(figsize=(12, 6))
    plt.plot(dates, temps, marker='o', linestyle='-', linewidth=2, markersize=6)
    plt.title(f'–ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è {city}')
    plt.xlabel('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è')
    plt.ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
    plt.grid(True)
    plt.xticks(rotation=45)
    plt.tight_layout()
    
    #–°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    return buf

def get_interval_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data="interval_1"),
            InlineKeyboardButton(text="3 –¥–Ω—è", callback_data="interval_3")
        ],
        [
            InlineKeyboardButton(text="5 –¥–Ω–µ–π", callback_data="interval_5")
        ]
    ])
    return keyboard

@dp.message(F.text == '/start')
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤.\n"
        "üå§ –Ø –ø–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ –≤–∞—à–µ–º –º–∞—Ä—à—Ä—É—Ç–µ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /weather –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
    )


@dp.message(F.text == '/weather')
async def cmd_weather(message: types.Message, state: FSMContext):
    await state.set_state(WeatherStates.waiting_for_start_point)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞:")

@dp.message(WeatherStates.waiting_for_start_point)
async def process_start_point(message: types.Message, state: FSMContext):
    await state.update_data(start_point=message.text)
    await state.set_state(WeatherStates.waiting_for_end_point)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞:")



@dp.callback_query(F.data.in_(["add_stops", "no_stops"]))
async def process_stops_choice(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "add_stops":
        await state.set_state(WeatherStates.waiting_for_stops)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    else:
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=get_interval_keyboard())
    await callback.answer()

@dp.message(WeatherStates.waiting_for_stops)
async def process_stops(message: types.Message, state: FSMContext):
    stops = [stop.strip() for stop in message.text.split(',')]
    await state.update_data(stops=stops)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=get_interval_keyboard())

@dp.callback_query(F.data.startswith("interval_"))
async def process_interval(callback: types.CallbackQuery, state: FSMContext):
    interval = int(callback.data.split("_")[1])
    data = await state.get_data()
    
    route_points = [data['start_point']]
    if 'stops' in data:
        route_points.extend(data['stops'])
    route_points.append(data['end_point'])
    
    await callback.message.answer(f"‚è≥ –°–æ–±–∏—Ä–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≤–∞—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ {interval} {'–¥–µ–Ω—å' if interval == 1 else '–¥–Ω—è' if interval < 5 else '–¥–Ω–µ–π'}...")
    
    for point in route_points:
        forecasts, dates, temps = await get_weather(point, interval)
        if forecasts and dates and temps:
            #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
            forecast_text = f"üìç –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {point} –Ω–∞ {interval} {'–¥–µ–Ω—å' if interval == 1 else '–¥–Ω—è' if interval < 5 else '–¥–Ω–µ–π'}:\n\n"
            for forecast in forecasts:
                forecast_text += (
                    f"üìÖ {forecast['date']}:\n"
                    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast['temp']}¬∞C\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {forecast['humidity']}%\n"
                    f"üí® –í–µ—Ç–µ—Ä: {forecast['wind']} –º/—Å\n"
                    f"‚òÅÔ∏è {forecast['description'].capitalize()}\n\n"
                )
            await callback.message.answer(forecast_text)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            graph = create_weather_graph(dates, temps, point)
            await callback.message.answer_photo(
                types.BufferedInputFile(
                    graph.getvalue(),
                    filename=f'weather_forecast_{point}.png'
                ),
                caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è {point} –Ω–∞ {interval} {'–¥–µ–Ω—å' if interval == 1 else '–¥–Ω—è' if interval < 5 else '–¥–Ω–µ–π'}"
            )
        else:
            await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {point}")
    
    await callback.message.answer("üèÅ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≤—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —Å–æ–±—Ä–∞–Ω!")
    await state.clear()
    await callback.answer()

@dp.error()
async def error_handler(update: types.Update, exception: Exception):
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {exception}")
    try:
        await update.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
    except:
        pass

if __name__ == '__main__':
    try:
        asyncio.run(dp.start_polling(bot))
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}')